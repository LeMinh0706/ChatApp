// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
    username,
    password,
    url_avatar
) VALUES (
    $1, $2, $3
) RETURNING id, username, password, url_avatar
`

type CreateUserParams struct {
	Username  string `json:"username"`
	Password  string `json:"password"`
	UrlAvatar string `json:"url_avatar"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password, arg.UrlAvatar)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.UrlAvatar,
	)
	return i, err
}

const getListUser = `-- name: GetListUser :many
SELECT id, username, password, url_avatar FROM users
WHERE id != $1
`

func (q *Queries) GetListUser(ctx context.Context, id int64) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getListUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.UrlAvatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, url_avatar FROM users
WHERE username = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.UrlAvatar,
	)
	return i, err
}
