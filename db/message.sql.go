// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: message.sql

package db

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO message (
    from_id,
    to_id,
    content
) VALUES (
    $1, $2, $3
) RETURNING id, from_id, to_id, content, date_created
`

type CreateMessageParams struct {
	FromID  int64  `json:"from_id"`
	ToID    int64  `json:"to_id"`
	Content string `json:"content"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.FromID, arg.ToID, arg.Content)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.FromID,
		&i.ToID,
		&i.Content,
		&i.DateCreated,
	)
	return i, err
}

const getMessages = `-- name: GetMessages :many
SELECT id, from_id, to_id, content, date_created FROM message 
WHERE (from_id = $1 AND to_id = $2) OR (to_id = $1 AND from_id = $2)
ORDER BY id DESC
`

type GetMessagesParams struct {
	FromID int64 `json:"from_id"`
	ToID   int64 `json:"to_id"`
}

func (q *Queries) GetMessages(ctx context.Context, arg GetMessagesParams) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessages, arg.FromID, arg.ToID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Message{}
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.FromID,
			&i.ToID,
			&i.Content,
			&i.DateCreated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
